# 新人エンジニア必見！画面遷移図・外部設計書・詳細設計の作り方完全ガイド

## はじめに

「画面設計って何から始めればいいの？」
「画面遷移図の書き方がわからない...」
「外部設計と詳細設計の違いって何？」

新人エンジニアが設計工程で必ずぶつかる壁が**設計書の作成**です。

この記事では、実際のWebシステム開発を例に、画面遷移図から詳細設計まで、段階的な設計書の作り方を分かりやすく解説します。

---

## 設計工程の全体像

まず、設計工程がどのような流れになっているかを理解しましょう。

```
要件定義 → 基本設計 → 詳細設計 → 実装 → テスト
           ↓
        外部設計
        ・画面遷移図
        ・画面レイアウト
        ・API仕様
           ↓
        内部設計  
        ・クラス設計
        ・DB設計
        ・処理フロー
```

**今回解説する設計書：**
- **画面遷移図**：ユーザーの操作フローを可視化
- **外部設計書**：画面・API等のインターフェース設計
- **詳細設計書**：実装レベルの技術仕様

---

## 1. 画面遷移図の作り方

### 画面遷移図とは？

**定義：** ユーザーがシステムを操作する際の画面の流れを表した図

**目的：**
- ユーザー体験の可視化
- 画面数・開発工数の把握
- チーム間での認識統一

### 基本的な書き方

#### 1. 画面の洗い出し
```markdown
## 主要画面リスト

### ユーザー操作系
- G01: ログイン画面
- G02: トップ画面  
- G03: 商品一覧画面
- G04: 商品詳細画面
- G05: カート画面
- G06: 購入完了画面

### システム処理系
- E01: エラー画面
- M01: メンテナンス画面
```

#### 2. 遷移パターンの整理
```markdown
## 遷移パターン

### 基本フロー
G01(ログイン) → G02(トップ) → G03(一覧) → G04(詳細) → G05(カート) → G06(完了)

### 分岐フロー
- ログイン失敗 → E01(エラー)
- 商品検索 → G03(一覧)
- カート空 → G02(トップ)

### 例外フロー  
- システムエラー → E01(エラー)
- メンテナンス → M01(メンテナンス)
```

#### 3. 遷移図の作成

**使用ツール例：**
- **Excel/Visio**: 企業でよく使われる
- **Figma/Miro**: デザイナーとの連携に便利
- **Draw.io**: 無料で高機能
- **PlantUML**: コードで図を生成

**図の構成要素：**
```
┌─────────┐    条件/アクション    ┌─────────┐
│  画面名   │ ──────────────→ │  画面名   │
│  (G01)   │                    │  (G02)   │
└─────────┘                    └─────────┘
```

### 実践例：保険シミュレーションシステム

#### 基本フロー
```
スタート → シミュレーション画面(G01) → 結果表示 → 申込み画面 → 完了画面
```

#### 詳細フロー
```markdown
G01: シミュレーション画面
├── 商品選択 → G02: 商品詳細
├── プラン設定 → G03: プラン詳細  
├── 見積保存 → E-mail送信
└── 申込み → G04: 申込み画面

G04: 申込み画面
├── 個人情報入力 → G05: 確認画面
├── 告知入力 → G06: 告知画面
└── エラー → E01: エラー画面
```

### 遷移図作成のコツ

#### 1. ユーザー視点で考える
```markdown
❌ システム視点：
「データベースに保存する」

✅ ユーザー視点：
「見積もりを保存する」
```

#### 2. 例外パターンも忘れずに
```markdown
正常系：ログイン成功 → トップ画面
異常系：ログイン失敗 → エラー画面
例外系：システム障害 → メンテナンス画面
```

#### 3. 画面IDを統一する
```markdown
## 命名規則例
- G + 連番：一般画面（G01, G02...）
- E + 連番：エラー画面（E01, E02...） 
- M + 連番：モーダル画面（M01, M02...）
- A + 連番：API（A01, A02...）
```

---

## 2. 外部設計書の作り方

### 外部設計書とは？

**定義：** システムの外部インターフェース（画面・API等）を定義した設計書

**含む内容：**
- 画面レイアウト・仕様
- API仕様
- データ入出力仕様
- 外部システム連携仕様

### 画面レイアウト設計

#### 1. 画面構成の定義

**基本構成要素：**
```markdown
## 画面構成

### ヘッダー部
- ロゴ
- ナビゲーションメニュー
- ユーザー情報

### メイン部  
- 主要コンテンツ
- 操作ボタン
- 入力フォーム

### フッター部
- 著作権情報
- リンク集
```

#### 2. レスポンシブ対応

**PC版とスマートフォン版の違い：**

| 要素 | PC版 | スマートフォン版 |
|------|------|----------------|
| レイアウト | 横並び | 縦並び |
| ナビゲーション | 上部固定 | ハンバーガーメニュー |
| フォント | 16px~ | 18px~ |
| ボタン | マウス操作 | タップ操作（大きめ） |

#### 3. UI仕様の詳細定義

```markdown
## 入力フォーム仕様

### 名前入力
- 項目名：お名前
- 入力タイプ：テキスト
- 必須/任意：必須
- 最大文字数：50文字
- バリデーション：全角文字のみ
- エラーメッセージ：「お名前を入力してください」

### 生年月日
- 項目名：生年月日
- 入力タイプ：日付選択
- 必須/任意：必須
- 範囲：1900年～現在
- バリデーション：未来日不可
- エラーメッセージ：「正しい生年月日を選択してください」
```

### API仕様設計

#### 1. API一覧の作成
```markdown
## API一覧

| API ID | API名 | メソッド | エンドポイント | 概要 |
|--------|-------|----------|----------------|------|
| A01 | 商品取得 | GET | /api/products | 商品一覧を取得 |
| A02 | 見積計算 | POST | /api/estimate | 保険料を計算 |
| A03 | 申込登録 | POST | /api/application | 申込情報を登録 |
```

#### 2. API詳細仕様
```markdown
## A02: 見積計算API

### 概要
商品・プラン情報から保険料を計算する

### リクエスト
POST /api/estimate

#### パラメータ
```json
{
  "productId": "P001",
  "age": 30,
  "gender": "M",
  "coverageAmount": 1000000,
  "paymentPeriod": "whole_life"
}
```

### レスポンス
#### 正常時（200）
```json
{
  "status": "success",
  "data": {
    "monthlyPremium": 5000,
    "annualPremium": 60000,
    "coverageDetails": [...]
  }
}
```

#### エラー時（400）
```json
{
  "status": "error",
  "message": "無効なパラメータです",
  "errorCode": "INVALID_PARAMETER"
}
```
```

### 外部設計書管理のコツ

#### 1. バージョン管理
```markdown
## 変更履歴

| 更新日 | バージョン | 更新箇所 | 更新内容 | 更新者 |
|--------|------------|----------|----------|--------|
| 2025/05/21 | 1.1 | シミュレーション画面 | レビュー指摘対応 | 田中 |
| 2025/04/17 | 1.0 | - | 新規作成 | 佐藤 |
```

#### 2. 画面キャプチャの活用
```markdown
## 画面イメージ

### PC版
[画面キャプチャまたはワイヤーフレーム]

### スマートフォン版  
[画面キャプチャまたはワイヤーフレーム]

## 説明
- ピンク色の部分：メインコンテンツ
- 青色の部分：ナビゲーション
- オレンジ色の部分：アクションボタン
```

---

## 3. 詳細設計書の作り方

### 詳細設計書とは？

**定義：** 実装に必要な技術的詳細を記載した設計書

**含む内容：**
- クラス設計
- メソッド仕様
- データベース設計
- 処理フロー

### クラス設計

#### 1. クラス構成
```markdown
## クラス一覧

### コントローラー層
- EstimateController: 見積もり処理制御
- ApplicationController: 申込み処理制御

### サービス層
- EstimateService: 見積もり業務ロジック
- PremiumCalculator: 保険料計算ロジック

### データアクセス層
- ProductRepository: 商品データアクセス
- ApplicationRepository: 申込みデータアクセス
```

#### 2. メソッド仕様
```markdown
## EstimateService.calculatePremium()

### 概要
商品情報と契約者情報から保険料を計算する

### 引数
| 引数名 | 型 | 必須 | 説明 |
|--------|----|----|------|
| productId | String | ○ | 商品ID |
| contractorInfo | ContractorInfo | ○ | 契約者情報 |
| coverageInfo | CoverageInfo | ○ | 保障情報 |

### 戻り値
| 型 | 説明 |
|----|------|
| PremiumResult | 計算結果（月払・年払保険料等） |

### 処理フロー
1. 商品マスタから商品情報を取得
2. 年齢・性別から基準保険料を算出
3. 保障内容から保険料を調整
4. 特約保険料を加算
5. 結果を返却

### 例外
- ProductNotFoundException: 商品が存在しない
- InvalidParameterException: パラメータが不正
```

### データベース設計

#### 1. テーブル設計
```markdown
## products（商品マスタ）

| カラム名 | 型 | NULL | キー | 説明 |
|----------|----|----|-----|------|
| product_id | VARCHAR(10) | NOT NULL | PK | 商品ID |
| product_name | VARCHAR(100) | NOT NULL | - | 商品名 |
| min_age | INT | NOT NULL | - | 最低加入年齢 |
| max_age | INT | NOT NULL | - | 最高加入年齢 |
| is_active | BOOLEAN | NOT NULL | - | 有効フラグ |
| created_at | TIMESTAMP | NOT NULL | - | 作成日時 |
| updated_at | TIMESTAMP | NOT NULL | - | 更新日時 |

## インデックス
- idx_product_active: (is_active, product_id)
```

#### 2. ER図
```markdown
## エンティティ関係

products (1) ←→ (N) premium_rates
products (1) ←→ (N) applications
applications (1) ←→ (N) application_details
```

### 処理フロー設計

#### 1. シーケンス図
```markdown
## 見積もり処理シーケンス

User → EstimateController: 見積もり要求
EstimateController → EstimateService: calculatePremium()
EstimateService → ProductRepository: findById()
ProductRepository → EstimateService: 商品情報
EstimateService → PremiumCalculator: calculate()
PremiumCalculator → EstimateService: 計算結果
EstimateService → EstimateController: PremiumResult
EstimateController → User: 見積もり結果
```

#### 2. アクティビティ図
```markdown
## 申込み処理フロー

開始
↓
入力チェック
├─NG → エラー表示
└─OK
↓
重複チェック
├─重複あり → 確認画面
└─重複なし
↓
データ保存
↓
メール送信
↓
完了画面表示
↓
終了
```

---

## 実践的な作成手順

### Step 1: 要件の整理（1日）
```markdown
## やること
- [ ] 要件定義書の読み込み
- [ ] 機能一覧の作成
- [ ] 画面一覧の作成
- [ ] API一覧の作成

## 成果物
- 機能要件整理表
- 画面・API一覧表
```

### Step 2: 画面遷移図作成（2日）
```markdown
## やること
- [ ] 主要フローの洗い出し
- [ ] 画面遷移図の作成
- [ ] 例外フローの追加
- [ ] レビュー・修正

## 成果物
- 画面遷移図
- 画面ID定義書
```

### Step 3: 外部設計書作成（5日）
```markdown
## やること
- [ ] 画面レイアウト設計
- [ ] API仕様設計
- [ ] データ入出力仕様
- [ ] レビュー・修正

## 成果物
- 画面設計書
- API仕様書
```

### Step 4: 詳細設計書作成（7日）
```markdown
## やること
- [ ] クラス設計
- [ ] メソッド仕様
- [ ] データベース設計
- [ ] 処理フロー設計
- [ ] レビュー・修正

## 成果物
- 詳細設計書
- DB設計書
```

---

## 設計書作成のコツ

### 1. 読み手を意識する

#### 外部設計書
```markdown
## 想定読者
- プロジェクトマネージャー
- デザイナー
- テスター
- クライアント

## ポイント  
- 専門用語を避ける
- 図表を多用する
- ユーザー視点で記述
```

#### 詳細設計書
```markdown
## 想定読者
- 実装担当者
- レビュアー
- 保守担当者

## ポイント
- 実装レベルで記述
- コード例を含める
- 技術的制約を明記
```

### 2. 一貫性を保つ

```markdown
## チェック項目
- [ ] 命名規則の統一
- [ ] 表記ゆれの確認
- [ ] 図表の形式統一
- [ ] バージョン管理の徹底
```

### 3. レビューを重視する

```markdown
## レビューポイント
- [ ] 要件との整合性
- [ ] 実装可能性
- [ ] 性能面の考慮
- [ ] セキュリティ考慮
- [ ] 保守性の観点
```

---

## よくある失敗例と対策

### 失敗例1: 画面遷移が複雑すぎる
❌ **問題：**
全ての画面を線で結んでしまう

✅ **対策：**
主要フローを明確にし、例外フローは別図で管理

### 失敗例2: API仕様が曖昧
❌ **問題：**
「ユーザー情報を取得する」だけの記述

✅ **対策：**
具体的なパラメータ・レスポンス・エラーパターンを詳記

### 失敗例3: 詳細設計が抽象的
❌ **問題：**
「データを保存する」程度の記述

✅ **対策：**
具体的なSQL・メソッド名・例外処理まで記述

---

## まとめ

設計書作成の流れとポイントをまとめます：

### 作成順序
```
1. 画面遷移図（全体フロー）
2. 外部設計書（インターフェース）
3. 詳細設計書（実装詳細）
```

### 各設計書の特徴
| 設計書 | 主な読者 | 記述レベル | 重要ポイント |
|--------|----------|------------|-------------|
| **画面遷移図** | 全関係者 | 概要レベル | ユーザーフローの可視化 |
| **外部設計書** | PM・デザイナー | インターフェースレベル | 画面・API仕様の詳細化 |
| **詳細設計書** | 開発者 | 実装レベル | コード化可能な詳細仕様 |

### 成功のポイント
1. **要件理解が8割**：設計前の要件理解が最重要
2. **段階的詳細化**：抽象から具体へ徐々に詳細化
3. **継続的レビュー**：各段階でのレビューとフィードバック
4. **一貫性の保持**：命名規則・表記方法の統一
5. **実装者目線**：実際に作る人が理解できる記述

**次のアクション：**
- 実際のプロジェクトで設計書を作成してみる
- 先輩エンジニアと設計レビューを行う
- 設計書テンプレートを自分なりにカスタマイズする

良い設計書が、良いシステムを生み出します。最初は時間がかかりますが、経験を積むことで効率的に作成できるようになります！

---

*設計は「考える」フェーズです。ここでしっかり考えることで、後の実装・テスト工程がスムーズに進みます。この記事が皆さんの設計スキル向上に役立てば幸いです。*
