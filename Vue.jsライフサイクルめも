# 🔄 **Vue.js ライフサイクル完全ガイド（新人エンジニア向け）**

## 🎯 **ライフサイクルとは？（3秒で理解）**

```
コンポーネントの一生 = 生まれる → 育つ → 死ぬ
各段階で「やりたいこと」を指定できる = ライフサイクルフック
```

---

## 📈 **ライフサイクルの全体像**

```
┌─────────────────┐
│   コンポーネント   │
│     作成開始      │
└─────────────────┘
         ↓
┌─────────────────┐
│    created      │ ← データ準備完了
│   データ利用可能   │
└─────────────────┘
         ↓
┌─────────────────┐
│      DOM        │
│     作成中       │
└─────────────────┘
         ↓
┌─────────────────┐
│    mounted      │ ← DOM利用可能
│   DOM操作可能    │
└─────────────────┘
         ↓
┌─────────────────┐
│   コンポーネント   │ ← データ変更で発火
│     更新中       │
└─────────────────┘
         ↓
┌─────────────────┐
│    updated      │ ← 更新完了
└─────────────────┘
         ↓
┌─────────────────┐
│   destroyed     │ ← 破棄時
│  クリーンアップ   │
└─────────────────┘
```

---

## 🛠️ **主要ライフサイクルフック**

### **created（データ準備完了）**
```javascript
export default {
  data() {
    return { message: 'Hello' }
  },
  created() {
    // ✅ データ利用可能
    console.log(this.message)        // 'Hello' が出力される
    
    // ✅ API呼び出し
    this.fetchUserData()             // データ取得開始
    
    // ❌ DOM操作不可
    this.$refs.myButton              // undefined（まだDOMがない）
  }
}
```

**使いどころ：**
- API呼び出し
- 初期データ設定
- イベントリスナー登録

---

### **mounted（DOM作成完了）**
```javascript
export default {
  mounted() {
    // ✅ DOM操作可能
    this.$refs.myInput.focus()       // input要素にフォーカス
    
    // ✅ 外部ライブラリ初期化
    this.initChart()                 // Chart.js などの初期化
    
    // ✅ イベントリスナー追加
    window.addEventListener('resize', this.handleResize)
  }
}
```

**使いどころ：**
- DOM要素の操作
- 外部ライブラリの初期化
- サイズ計算
- フォーカス設定

---

### **updated（更新完了）**
```javascript
export default {
  data() {
    return { count: 0 }
  },
  updated() {
    // ✅ データ変更後のDOM操作
    console.log('DOMが更新されました')
    
    // ⚠️ 無限ループに注意
    // this.count++                  // これはダメ！無限更新になる
  }
}
```

**使いどころ：**
- 更新後のDOM調整
- スクロール位置調整
- サードパーティライブラリの更新

---

### **destroyed（破棄時）**
```javascript
export default {
  destroyed() {
    // ✅ イベントリスナー削除
    window.removeEventListener('resize', this.handleResize)
    
    // ✅ タイマークリア
    clearInterval(this.timer)
    
    // ✅ WebSocket切断
    this.socket.close()
  }
}
```

**使いどころ：**
- イベントリスナー削除
- タイマークリア
- メモリリーク防止

---

## 🎨 **実用的なパターン**

### **Pattern 1: API呼び出し**
```javascript
export default {
  data() {
    return {
      users: [],                     // 初期値
      loading: true                  // ローディング状態
    }
  },
  
  async created() {                  // created で API 呼び出し
    try {
      this.users = await fetchUsers() // データ取得
    } catch (error) {
      console.error(error)           // エラーハンドリング
    } finally {
      this.loading = false           // ローディング終了
    }
  }
}
```

### **Pattern 2: DOM操作**
```javascript
export default {
  mounted() {                        // mounted で DOM 操作
    // アコーディオンの高さ調整
    this.$nextTick(() => {           // DOM更新完了後に実行
      const element = this.$refs.accordion
      element.style.height = element.scrollHeight + 'px'
    })
  }
}
```

### **Pattern 3: イベント管理**
```javascript
export default {
  mounted() {                        // イベントリスナー登録
    window.addEventListener('resize', this.onResize)
    document.addEventListener('click', this.onClickOutside)
  },
  
  destroyed() {                      // イベントリスナー削除
    window.removeEventListener('resize', this.onResize)
    document.removeEventListener('click', this.onClickOutside)
  },
  
  methods: {
    onResize() {                     // リサイズ処理
      this.updateLayout()
    },
    onClickOutside() {               // 外部クリック処理
      this.closeModal()
    }
  }
}
```

---

## 🧪 **テストでのライフサイクル**

### **created のテスト**
```javascript
it('created でデータが初期化される', () => {
  const spy = jest.spyOn(Component.methods, 'fetchData') // メソッドを監視
  
  const wrapper = mount(Component)   // マウント時に created が実行される
  
  expect(spy).toHaveBeenCalled()     // fetchData が呼ばれたか確認
})
```

### **mounted のテスト**
```javascript
it('mounted で DOM 操作が実行される', () => {
  const wrapper = mount(Component)   // マウント
  
  // mounted での DOM 操作結果を確認
  expect(wrapper.find('input').element).toBe(document.activeElement)
})
```

### **destroyed のテスト**
```javascript
it('destroyed でクリーンアップされる', () => {
  const spy = jest.spyOn(window, 'removeEventListener')
  
  const wrapper = mount(Component)   // マウント
  wrapper.destroy()                  // 破棄（destroyed が実行される）
  
  expect(spy).toHaveBeenCalledWith('resize', expect.any(Function))
})
```

---

## ⚡ **パフォーマンス最適化**

### **heavy処理は created で**
```javascript
export default {
  created() {
    // ✅ 重い計算は早めに開始
    this.expensiveCalculation()      // 計算開始
  },
  
  mounted() {
    // ✅ DOM操作は mounted で
    this.setupUI()                   // UI設定
  }
}
```

### **条件付きライフサイクル**
```javascript
export default {
  created() {
    if (this.needsData) {            // 条件付きでAPI呼び出し
      this.fetchData()
    }
  },
  
  mounted() {
    if (this.$refs.chart) {          // 要素が存在する場合のみ
      this.initChart()
    }
  }
}
```

---

## 🚨 **よくあるミス**

### **❌ やってはいけないこと**
```javascript
export default {
  created() {
    // ❌ DOM操作（まだDOMがない）
    this.$refs.button.click()
    
    // ❌ イベントリスナー削除し忘れ
    window.addEventListener('scroll', this.onScroll)
  },
  
  updated() {
    // ❌ データ変更（無限ループ）
    this.count++
  }
}
```

### **✅ 正しい書き方**
```javascript
export default {
  created() {
    // ✅ データ準備
    this.initializeData()
  },
  
  mounted() {
    // ✅ DOM操作
    this.$refs.button.focus()
    
    // ✅ イベントリスナー登録
    window.addEventListener('scroll', this.onScroll)
  },
  
  destroyed() {
    // ✅ クリーンアップ
    window.removeEventListener('scroll', this.onScroll)
  }
}
```

---

## 📋 **ライフサイクル選択チャート**

```
何をしたい？
    ↓
┌─────────────────┐
│   API呼び出し    │ → created
└─────────────────┘

┌─────────────────┐
│   DOM操作       │ → mounted
└─────────────────┘

┌─────────────────┐
│ イベント登録     │ → mounted
└─────────────────┘

┌─────────────────┐
│ 更新後の調整     │ → updated
└─────────────────┘

┌─────────────────┐
│ クリーンアップ   │ → destroyed
└─────────────────┘
```

---

## 🎯 **まとめ**

| フック | タイミング | 用途 | DOM操作 |
|--------|-----------|------|---------|
| `created` | データ準備完了 | API呼び出し | ❌ |
| `mounted` | DOM作成完了 | DOM操作、初期化 | ✅ |
| `updated` | データ更新完了 | 更新後の調整 | ✅ |
| `destroyed` | 破棄時 | クリーンアップ | ❌ |

**覚え方：**
- `created` = データの準備
- `mounted` = DOMの準備  
- `updated` = データの変更
- `destroyed` = お片付け

このライフサイクルを理解すれば、Vue.jsコンポーネントを適切に管理できるようになります！
