# 新人エンジニア必見！運用テスト・総合テスト・脆弱性診断の基本ガイド

## はじめに

「コードは書けたけど、テストって何をするの？」
「運用テストと総合テストの違いがわからない...」
「脆弱性診断って難しそう...」

新人エンジニアが必ずぶつかる壁がテスト工程です。

この記事では、開発の最終段階で行う3つの重要なテストについて、実務で役立つ知識を分かりやすく解説します。

---

## テスト工程の全体像

まず、開発からリリースまでの流れを理解しましょう。

```
開発 → 単体テスト → 結合テスト → 総合テスト → 運用テスト → 脆弱性診断 → リリース
```

**今回解説する3つのテスト：**
- **総合テスト**：システム全体が正常に動くかの確認
- **運用テスト**：実際の運用環境での動作確認
- **脆弱性診断**：セキュリティの穴がないかのチェック

---

## 1. 総合テスト（System Test）

### 総合テストとは？

**定義：** システム全体が設計通りに動作するかを確認するテスト

**目的：** 
- 機能が仕様通りに動くか
- システム間の連携が正常か
- 性能要件を満たしているか

### 何をテストするの？

#### 機能テスト
```
例：ECサイトの場合
✅ 商品の検索ができる
✅ カートに商品を追加できる
✅ 決済処理が正常に完了する
✅ 注文履歴が表示される
```

#### 非機能テスト
```
✅ 性能：100人同時アクセスでも3秒以内に表示
✅ 可用性：99.9%以上のサービス稼働率
✅ 使いやすさ：3クリック以内で商品購入完了
```

### 新人エンジニアの役割

**よくある担当業務：**
- テストケースの実行
- 不具合の記録・報告
- テスト結果の整理

**注意ポイント：**
- 「動く」だけでなく「正しく動く」かを確認
- 想定外の操作も試してみる
- 小さな不具合も見逃さない

### 実践例：総合テスト チェックリスト

```markdown
## 商品管理システム 総合テスト

### 基本機能
- [ ] 商品登録（正常データ）
- [ ] 商品登録（異常データ）
- [ ] 商品検索（キーワード）
- [ ] 商品削除（確認ダイアログ表示）

### 画面遷移
- [ ] トップページから各画面への遷移
- [ ] 戻るボタンの動作
- [ ] エラー画面からの復帰

### データ整合性
- [ ] 登録したデータが正しく保存される
- [ ] 削除したデータが表示されない
- [ ] 同時更新時の排他制御
```

---

## 2. 運用テスト（Operational Test）

### 運用テストとは？

**定義：** 本番に近い環境で、実際の運用を想定したテスト

**目的：**
- 本番環境での動作確認
- 運用手順の検証
- 障害対応の確認

### 本番環境との違い

| 項目 | 開発環境 | 運用テスト環境 | 本番環境 |
|------|----------|----------------|----------|
| データ量 | 少ない | 本番相当 | 実データ |
| アクセス数 | 1人 | 想定負荷 | 実ユーザー |
| 監視 | なし | あり | 24時間監視 |

### 何をテストするの？

#### システム運用テスト
```
✅ バックアップ・リストア手順
✅ ログ監視・アラート機能
✅ 定期メンテナンス作業
✅ システム起動・停止手順
```

#### 障害対応テスト
```
✅ サーバーダウン時の自動復旧
✅ データベース障害時の対応
✅ ネットワーク障害時の影響範囲
✅ 緊急連絡フローの確認
```

#### 性能・負荷テスト
```
✅ 想定ユーザー数での動作確認
✅ ピーク時間帯の負荷テスト
✅ 大量データ処理時間の測定
✅ メモリ・CPU使用率の監視
```

### 新人エンジニアができること

**運用テストでの役割：**
- 手順書通りの操作実行
- 異常値の監視・記録
- 簡単な障害再現テスト

**覚えておくべきこと：**
- ログの見方
- 監視ツールの基本操作
- エスカレーション手順

---

## 3. 脆弱性診断（Vulnerability Assessment）

### 脆弱性診断とは？

**定義：** システムのセキュリティの穴（脆弱性）を発見・評価するテスト

**重要性：**
- 情報漏洩の防止
- 不正アクセスの防止
- 法的・社会的信頼の確保

### 主な脆弱性の種類

#### Webアプリケーション脆弱性
```
❌ SQLインジェクション
   → データベースが不正操作される

❌ XSS（クロスサイトスクリプティング）
   → 悪意のあるスクリプトが実行される

❌ CSRF（クロスサイトリクエストフォージェリ）
   → 意図しない処理が実行される
```

#### インフラ脆弱性
```
❌ 古いソフトウェアの使用
❌ 不適切なアクセス権限設定
❌ 暗号化の不備
❌ 不要なポートの開放
```

### 脆弱性診断の流れ

#### 1. 自動診断ツールによるスキャン
```
使用例：
- OWASP ZAP（無料）
- Nessus（商用）
- Burp Suite（商用）
```

#### 2. 手動での検査
```
チェック項目：
✅ 入力値検証の確認
✅ 認証・認可の仕組み
✅ セッション管理
✅ エラーハンドリング
```

#### 3. 結果の評価・対策
```
脅威レベル：
🔴 Critical（緊急）: 即座に対応
🟠 High（高）: 速やかに対応
🟡 Medium（中）: 計画的に対応
🟢 Low（低）: 長期的に対応
```

### 新人エンジニアができること

**脆弱性診断での役割：**
- 診断ツールの操作補助
- 診断結果の整理・分類
- 軽微な脆弱性の修正

**身につけたいスキル：**
- セキュリティの基本知識
- 診断ツールの使い方
- 脆弱性情報の収集方法

---

## 実務での進め方

### プロジェクトでのテスト計画例

```markdown
## テストスケジュール（8週間）

### Week 1-3: 総合テスト
- 機能テスト実施
- 不具合修正
- 再テスト

### Week 4-6: 運用テスト
- 本番環境構築
- 運用手順確認
- 性能テスト

### Week 7-8: 脆弱性診断
- 自動診断実行
- 手動診断実施
- 対策実装
```

### 各テストで使うツール例

#### 総合テスト
- **テスト管理**: TestRail, Redmine
- **自動テスト**: Selenium, Cypress
- **性能測定**: JMeter, Gatling

#### 運用テスト
- **監視**: Zabbix, Nagios
- **ログ解析**: ELK Stack, Fluentd
- **負荷テスト**: LoadRunner, k6

#### 脆弱性診断
- **Webアプリ診断**: OWASP ZAP, Burp Suite
- **ネットワーク診断**: Nmap, Nessus
- **コード診断**: SonarQube, Checkmarx

---

## よくある質問

### Q. テストで見つかった不具合は誰が直すの？
**A.** 基本的には開発担当者が修正します。新人の場合は、まず不具合の詳細を正確に報告することが大切です。

### Q. 全部のテストに合格しないとリリースできない？
**A.** プロジェクトによりますが、重要度の高い不具合は必ず修正が必要です。軽微な問題は次回対応とする場合もあります。

### Q. テストって開発より簡単？
**A.** そんなことはありません！品質を守る重要な工程で、専門知識も必要です。

---

## まとめ

3つのテストの違いとポイントをまとめます：

| テスト種類 | 主な目的 | 確認内容 | 新人の役割 |
|------------|----------|----------|------------|
| **総合テスト** | 機能確認 | 仕様通りの動作 | テスト実行・不具合報告 |
| **運用テスト** | 運用確認 | 本番での安定動作 | 手順実行・監視 |
| **脆弱性診断** | セキュリティ確認 | 安全性の検証 | 診断補助・結果整理 |

**新人エンジニアへのアドバイス：**
1. **細かい部分まで注意深く**：小さな不具合が大きな問題につながることも
2. **手順を正確に実行**：テストの信頼性は正確な実行にかかっています
3. **わからないことは質問**：安全性に関わることなので、推測は禁物
4. **継続的な学習**：技術の進歩とともにテスト手法も進化します

**次のステップ：**
- 実際のプロジェクトでテスト計画を見てみる
- 簡単な診断ツールを触ってみる
- 先輩エンジニアにテストのコツを聞いてみる

良いテストが、良いシステムを作ります。一つひとつ丁寧に学んでいきましょう！

---

*システムの品質を守るテスト工程。最初は大変ですが、やりがいのある重要な仕事です。この記事が皆さんの理解の助けになれば幸いです。*
