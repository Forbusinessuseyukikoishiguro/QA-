# 新人エンジニア向け：要件整理書の作り方完全ガイド

## はじめに

開発現場でよく聞く「要件が曖昧で...」「仕様がよくわからない...」という声。その解決策が**要件整理書**です。

要件整理書は、プロジェクトの成功を左右する重要な文書。でも新人の頃は「どう書けばいいの？」と迷いがちです。

この記事では、実際の例を使って要件整理書の作り方を分かりやすく解説します。

---

## 要件整理書とは？

**要件整理書**は、システムに必要な機能や制約を整理した文書です。

### なぜ重要なのか？

❌ **要件整理書がないと...**
- 開発中に「あれ、この機能どうするんだっけ？」
- 完成後に「想定と違う！」
- 工数が増大、納期遅延

✅ **要件整理書があると...**
- チーム全員が同じ理解
- 開発方針が明確
- 変更時の影響範囲が分かる

---

## 要件整理書の作り方【5ステップ】

### ステップ1：散らばった情報を集める

まずは関連する情報をすべて集めます。

**情報源の例：**
- 会議の議事録
- メールのやり取り
- Excelの仕様書
- 口頭での依頼内容

**実例：**
```
メディカル系「商品紹介」ラジオボタン系設定
～部分設定の確認

オプション要素を詳細画面から変更

おすすめプランのオプションを詳細画面から変更
```

### ステップ2：情報を分類・整理する

集めた情報を論理的に分類します。

**分類の観点：**
- 機能別
- 画面別
- ユーザー別
- 優先度別

**整理後の例：**
```markdown
## メディカル系商品紹介機能

### 基本機能
- 商品紹介システム
- ラジオボタン機能
- オプション管理機能

### 詳細機能
1. ラジオボタン設定
2. オプション要素管理
3. 詳細画面での変更機能
```

### ステップ3：構造化して記述する

読みやすい構造で記述します。

**おすすめ構造：**
```markdown
# タイトル
## 概要
## 機能要件
### 機能A
### 機能B
## 非機能要件
## 制約事項
```

### ステップ4：具体例を追加する

抽象的な記述だけでなく、具体例も記載します。

**Before（抽象的）：**
> ユーザーが選択できる機能

**After（具体的）：**
> ユーザーが複数の商品オプションから一つを選択できるラジオボタン機能
> 例：「プランA」「プランB」「プランC」から一つを選択

### ステップ5：レビュー・改善する

**チェックポイント：**
- [ ] 誰が読んでも理解できるか？
- [ ] 曖昧な表現はないか？
- [ ] 漏れている要件はないか？
- [ ] 矛盾している箇所はないか？

---

## 実践例：メディカル系商品紹介システム

実際に要件整理書を作ってみましょう。

### 元の散らばった情報
```
メディカル系「商品紹介」ラジオボタン系設定
オプション要素を詳細画面から変更
おすすめプランのオプション詳細画面変更
詳細画面
```

### 整理後の要件書
```markdown
# メディカル系商品紹介システム要件書

## 概要
メディカル系商品の紹介・選択システム

## 機能要件

### 1. 商品選択機能
**目的：** ユーザーが適切な商品を選択できる
**詳細：**
- ラジオボタンによる単一選択
- おすすめプランの表示
- 選択状態の視覚的フィードバック

### 2. オプション管理機能
**目的：** 商品のオプション設定を柔軟に変更
**詳細：**
- 詳細画面からのオプション編集
- リアルタイム反映
- 変更履歴の保持

### 3. 詳細画面機能
**目的：** 商品・オプションの詳細情報表示
**詳細：**
- 包括的な情報表示
- 編集機能へのアクセス
- ユーザビリティを考慮したUI
```

---

## よくある失敗例と対策

### 失敗例1：専門用語だらけ
❌ **悪い例：**
> APIのエンドポイントでJSONをパース

✅ **良い例：**
> 外部システムから商品データを取得する機能

### 失敗例2：曖昧な表現
❌ **悪い例：**
> いい感じに表示する

✅ **良い例：**
> 商品画像、価格、説明文を縦に並べて表示

### 失敗例3：要件と実装が混在
❌ **悪い例：**
> ReactでAPIを叩いてstateに保存

✅ **良い例：**
> 商品データを取得して画面に表示する

---

## まとめ

要件整理書の作成は、エンジニアの基本スキルです。

**重要なポイント：**
1. **誰が読んでも理解できる**明確さ
2. **具体例**を含めた詳細さ
3. **論理的な構造**での整理
4. **継続的な改善**

最初は時間がかかりますが、慣れれば開発効率が大幅に向上します。

**次のアクション：**
- 今担当している案件で要件整理書を作ってみる
- 先輩エンジニアにレビューしてもらう
- チームで要件整理のルールを決める

良い要件整理書が、良いシステムの第一歩です！

---

*この記事が新人エンジニアの皆さんの役に立てば幸いです。質問や改善点があれば、ぜひフィードバックをお寄せください。*
