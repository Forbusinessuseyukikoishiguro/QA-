# 新人エンジニア向け：影響調査票の作り方完全ガイド

## はじめに

影響調査票は、システム変更時に他の機能やドキュメントに与える影響を事前に調査・記録するための重要な文書です。適切な影響調査を行うことで、予期しない不具合やシステム障害を防ぎ、安全な開発を実現できます。この記事では、実際の影響調査票の例を参考に、新人エンジニアでも分かりやすく作成方法を解説します。

## 影響調査票とは？

**影響調査票**とは、システムの変更や機能追加を行う際に、その変更が既存のシステムに与える影響を体系的に調査・記録した文書です。変更による波及効果を事前に把握し、必要な対応を漏れなく実施するための重要なツールです。

### 影響調査票の目的
- **リスク管理**：変更による予期しない影響を事前に発見
- **作業漏れ防止**：必要な修正箇所を体系的に特定
- **品質保証**：変更の妥当性と安全性を確認
- **コスト管理**：変更に伴う工数を正確に見積もり

## 影響調査票の基本構成

### 1. 基本情報セクション

```
■ 調査基本情報
・調査日：2025/4/1
・調査者：田中太郎
・承認者：山田部長
・変更概要：申込情報PDF出力機能の追加
・変更理由：顧客要望による機能追加
・影響レベル：中（機能追加、既存機能への影響あり）
```

### 2. 変更概要

```
■ 変更概要
・変更内容：
  出力したPDFについて、画面上に表示するためにpresigned-urlを取得するAPIを作成する
・主な変更点：
  1. 新規API作成（PDFダウンロードパス取得）
  2. フロント画面でのPDF表示機能追加
  3. 既存のPDF出力機能の拡張
```

### 3. 設計書影響調査

システム変更に伴って修正が必要な設計書を調査します。

| No. | 設計書名 | 対応要否 | 内容 |
|-----|----------|----------|------|
| 22 | 内部設計書_4.フロント設計_2.プログラム処理記述_18.申込情報PDF出力.xlsx | ○ | 既存処理の修正 |
| 76 | 内部設計書_5.サーバ設計_1.API一覧.xlsx | ○ | 新規API追加 |
| 193 | 内部設計書_5.サーバ設計_2.API仕様_117.PDFダウンロードパス取得.xlsx | ○ | 新規作成 |
| 194 | 内部設計書_5.サーバ設計_3.プログラム処理一覧.xlsx | ○ | 新規処理追加 |
| 208 | 内部設計書_5.サーバ設計_4.プログラム処理記述_15_3.views.xlsx | ○ | 新規処理記述 |

### 4. ソースコード影響調査

実際のコード変更箇所を特定します。

| No. | 対象資材 | 変更内容 | 関連するコード |
|-----|----------|----------|----------------|
| 1 | views.py, serializers.py, urls.py | 出力したPDFについて、画面上に表示するためにpresigned-urlを取得するAPIを作成する | - |
| 2 | G18DownLoadPDFPage.vue | 上記APIを画面表示前に呼出し、pdfjsを用いて画面内に表示する | G06ImportantPage.vue（参考ソース） |

## 影響調査の実施手順

### Step 1: 変更内容の整理

**1. 変更要求の分析**
- 何を変更するのか？
- なぜ変更するのか？
- いつまでに変更するのか？
- 誰が変更を行うのか？

**2. 変更スコープの定義**
- 機能追加 / 機能修正 / 機能削除
- 影響範囲の概算（フロント / サーバ / データベース）
- 関連システムへの影響

### Step 2: 設計書影響調査

**1. 関連設計書の洗い出し**
```
■ 調査対象設計書
・要件定義書
・外部設計書（画面設計、API設計等）
・内部設計書（プログラム処理、データベース設計等）
・テスト設計書
・運用設計書
```

**2. 影響度の評価**
- **○（要対応）**: 修正が必要
- **△（確認要）**: 影響の可能性があり、詳細確認が必要
- **－（対応不要）**: 影響なし

### Step 3: ソースコード影響調査

**1. 影響箇所の特定**
```
■ 調査方法
・grep検索：関連する関数名、変数名、クラス名で検索
・IDE機能：参照元・参照先の調査
・静的解析ツール：依存関係の分析
・Git履歴：過去の変更履歴から関連箇所を特定
```

**2. 変更レベルの分類**
- **新規作成**: 新しいファイル・機能の追加
- **修正**: 既存ファイルの変更
- **削除**: 不要なファイル・機能の削除
- **リファクタリング**: 機能は変更せず、内部構造を改善

### Step 4: テスト影響調査

**1. テストケースの影響調査**
```
■ 調査対象
・単体テスト：変更したメソッド・関数のテスト
・結合テスト：API連携、画面遷移のテスト
・システムテスト：エンドツーエンドのテスト
・回帰テスト：既存機能への影響確認
```

**2. テストデータの影響調査**
- 新規テストデータの作成要否
- 既存テストデータの修正要否
- テスト環境の設定変更要否

## 実際の影響調査票サンプル

### PDF表示機能追加の影響調査票

```
■ 影響調査票
・調査日：2025/4/1
・調査者：田中太郎
・変更概要：申込情報PDF出力機能の画面表示対応

■ 変更詳細
【変更内容】
1. PDFダウンロードパス取得APIの新規作成
2. フロント画面でのPDF表示機能追加
3. 既存PDF出力機能との連携

【技術的な変更点】
・Django REST framework使用のAPI追加
・Vue.js + PDF.jsでの画面表示
・AWS S3のpresigned-url機能活用

■ 設計書影響調査結果
【要対応設計書】
1. 内部設計書_4.フロント設計_2.プログラム処理記述_18.申込情報PDF出力.xlsx
   - 既存のPDF出力処理に画面表示機能を追加
   
2. 内部設計書_5.サーバ設計_1.API一覧.xlsx
   - 新規API「PDFダウンロードパス取得」を追加
   
3. 内部設計書_5.サーバ設計_2.API仕様_117.PDFダウンロードパス取得.xlsx
   - 新規作成（API仕様の詳細設計）
   
4. 内部設計書_5.サーバ設計_3.プログラム処理一覧.xlsx
   - 新規処理「PDFダウンロードパス取得処理」を追加
   
5. 内部設計書_5.サーバ設計_4.プログラム処理記述_15_3.views.xlsx
   - 新規処理の詳細設計

■ ソースコード影響調査結果
【サーバサイド】
1. views.py
   - 新規API追加（PDFダウンロードパス取得）
   - boto3使用のS3 presigned-url生成機能
   
2. serializers.py
   - 新規APIのリクエスト・レスポンスシリアライザー追加
   
3. urls.py
   - 新規APIのURL設定追加

【フロントサイド】
1. G18DownLoadPDFPage.vue
   - 新規作成（PDF表示専用画面）
   - PDF.js使用のPDF表示機能
   - 既存のG06ImportantPage.vueを参考にした実装
```

## 影響調査のポイント

### 1. **体系的な調査**

**調査の観点**
- **機能面**: 追加・修正・削除される機能
- **非機能面**: 性能、セキュリティ、運用性への影響
- **データ面**: データベース、ファイル、外部連携への影響
- **インフラ面**: サーバ、ネットワーク、ミドルウェアへの影響

### 2. **影響レベルの適切な評価**

**影響レベルの定義**
- **高**: システム全体に大きな影響、慎重な対応が必要
- **中**: 特定機能に影響、計画的な対応が必要
- **低**: 局所的な影響、通常の変更プロセスで対応可能

### 3. **関連者との連携**

**関係者の巻き込み**
- **設計者**: 設計書の整合性確認
- **開発者**: 実装の詳細確認
- **テスター**: テストケースの影響確認
- **運用者**: 運用への影響確認

## よくある間違いと対策

### 1. **調査範囲が狭すぎる**
**問題**: 直接的な影響箇所のみを調査
**対策**: 間接的な影響、将来の影響も考慮

### 2. **設計書の更新漏れ**
**問題**: コード変更のみで設計書を更新しない
**対策**: 設計書とコードの整合性を維持

### 3. **テスト観点の不足**
**問題**: 機能テストのみで回帰テストを考慮しない
**対策**: 既存機能への影響も含めたテスト計画

### 4. **運用面の考慮不足**
**問題**: 開発時の影響のみを調査
**対策**: 本番運用時の影響も調査

## 影響調査のチェックリスト

### 事前確認
- [ ] 変更要求の内容を正確に理解している
- [ ] 変更スコープが明確に定義されている
- [ ] 関連システムが特定されている
- [ ] 調査期間が適切に設定されている

### 調査実施
- [ ] 全ての設計書を調査対象にしている
- [ ] ソースコードの静的解析を実施している
- [ ] データベースへの影響を確認している
- [ ] 外部システムとの連携を確認している

### 結果確認
- [ ] 影響箇所が漏れなく特定されている
- [ ] 対応優先度が適切に設定されている
- [ ] 必要な工数が見積もられている
- [ ] 関係者への共有が完了している

## デジタルツールの活用

### 1. **静的解析ツール**
```
■ 主要なツール
・SonarQube: コード品質と依存関係の分析
・NDepend: .NET向けの詳細な依存関係分析
・Structure101: アーキテクチャレベルの依存関係分析
・IntelliJ / Eclipse: IDEの依存関係分析機能
```

### 2. **バージョン管理システム**
```
■ Git活用方法
・git log --follow: ファイルの変更履歴確認
・git blame: 行単位での変更者・変更日確認
・git diff: 変更差分の確認
・GitHub/GitLab: プルリクエストでの影響確認
```

### 3. **プロジェクト管理ツール**
```
■ 管理ツール例
・Jira: 課題管理と影響調査のタスク管理
・Confluence: 影響調査結果の共有
・Redmine: 調査進捗の管理
・Trello: 軽量な調査タスク管理
```

## 影響調査票のテンプレート

### 基本テンプレート

```
■ 影響調査票

【基本情報】
・調査日：
・調査者：
・承認者：
・変更概要：
・変更理由：
・影響レベル：高/中/低

【変更詳細】
・変更内容：
・技術的な変更点：
・制約事項：

【設計書影響調査】
| No. | 設計書名 | 対応要否 | 内容 |
|-----|----------|----------|------|
|     |          |          |      |

【ソースコード影響調査】
| No. | 対象資材 | 変更内容 | 関連するコード |
|-----|----------|----------|----------------|
|     |          |          |                |

【テスト影響調査】
・単体テスト：
・結合テスト：
・システムテスト：
・回帰テスト：

【運用影響調査】
・デプロイ手順：
・運用監視：
・バックアップ：
・性能：

【リスク評価】
・高リスク：
・中リスク：
・低リスク：

【対応計画】
・対応優先度：
・対応スケジュール：
・担当者：
・完了予定日：
```

## まとめ

影響調査票は、安全なシステム変更を実現するための重要なツールです。適切に作成・活用することで、予期しない障害を防ぎ、品質の高いシステム開発が可能になります。

**重要なポイント：**
- 変更内容を正確に把握し、体系的に影響を調査する
- 設計書とソースコードの両方を調査対象とする
- テストと運用への影響も忘れずに確認する
- 関係者と連携して、調査結果を共有する
- デジタルツールを活用して効率的に調査を実施する

新人エンジニアの皆さんも、この記事を参考に質の高い影響調査票を作成してください。最初は時間がかかるかもしれませんが、経験を積むことで効率的に調査できるようになります。わからないことがあれば、先輩エンジニアに相談し、チーム全体で安全な開発を心がけましょう。

影響調査は、システム変更の成功を左右する重要なプロセスです。丁寧に実施することで、より信頼性の高いシステムを構築できるはずです。
