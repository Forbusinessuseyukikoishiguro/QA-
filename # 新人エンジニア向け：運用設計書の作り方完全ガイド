# 新人エンジニア向け：運用設計書の作り方完全ガイド

## はじめに

運用設計書は、システムを本番環境で安全かつ効率的に運用するための「運用の設計図」です。どんなに優れたシステムでも、適切な運用設計がなければ安定稼働は困難です。この記事では、実際の運用設計書を参考にしながら、新人エンジニアの方でも理解しやすいように運用設計書の作り方を解説します。

## 運用設計書とは？

**運用設計書**とは、システムの運用方法を具体的に定義した文書です。システムを「どのように」「いつ」「誰が」運用するかを明確にし、安定した運用を実現するための指針となります。

### 運用設計書の重要性
- **運用の標準化**：誰でも同じ手順で運用できる
- **リスク管理**：障害発生時の対応が明確
- **品質保証**：安定したサービス提供が可能
- **効率化**：無駄な作業を排除し、自動化を促進

## 運用設計書の基本構成

### 1. 基本情報
```
■ 文書情報
・システム名：〇〇システム
・作成者：山田太郎
・作成日：2025/01/15
・更新者：田中花子
・更新日：2025/03/20
・承認者：佐藤部長
```

### 2. 運用時間の定義
システムがいつ稼働し、いつメンテナンスを行うかを明確に定義します。

**記述例：**
```
■ オンラインサービス時間
・サービス提供時間：24時間365日
・利用者：一般顧客、管理者
・利用機能：商品購入、在庫管理

■ バッチ処理時間
・処理時間：毎日AM2:00～AM4:00
・処理内容：売上集計、在庫更新、レポート作成

■ システムメンテナンス時間
・定期メンテナンス：毎月第3日曜日 AM1:00～AM3:00
・緊急メンテナンス：障害発生時、事前通知後実施
```

### 3. 通常運用（定期運用）
日常的に実施する運用作業を定義します。

**主な運用項目：**

| タイミング | 運用項目 | 実行方式 | 内容 |
|-----------|----------|----------|------|
| 日次 | バックアップ | 自動実行 | データベースの定期バックアップ |
| 日次 | システム監視 | 自動監視 | 死活監視、リソース監視 |
| 週次 | ログ確認 | 手動確認 | エラーログの確認と対応 |
| 月次 | 性能監視 | 自動レポート | レスポンス時間、スループット確認 |
| 年次 | ID管理 | 手動実施 | 不要なアカウントの削除 |

### 4. 不定期運用
計画的に実施する、定期的でない運用作業を定義します。

**主な不定期運用：**
- **アプリケーションリリース**：新機能の本番適用
- **パッチ適用**：セキュリティ更新、バグ修正
- **サーバ拡張**：負荷増大に応じたスケールアウト
- **設定変更**：システム設定の変更作業

### 5. 障害時運用
システム障害が発生した際の対応手順を定義します。

**障害対応の基本フロー：**
```
1. 障害検知
   ↓
2. 初期対応（影響範囲の確認）
   ↓
3. 応急処置（サービス復旧）
   ↓
4. 根本原因調査
   ↓
5. 恒久対策の実施
   ↓
6. 再発防止策の検討
```

## 実際の作成手順

### Step 1: 要件の整理
運用設計を始める前に、以下の要件を整理します。

**確認事項：**
- **SLA（Service Level Agreement）**：サービス品質の目標値
- **RTO（Recovery Time Objective）**：障害発生時の復旧目標時間
- **RPO（Recovery Point Objective）**：データ損失許容時間
- **運用体制**：運用チームの構成と役割分担

### Step 2: 運用時間の設計
サービスの特性に応じて運用時間を設計します。

**24時間365日サービスの場合：**
```
■ サービス提供時間
・対顧客サービス：24時間365日
・管理機能：平日9:00～18:00（土日祝日除く）

■ メンテナンス時間
・定期メンテナンス：毎月第3日曜日 AM1:00～AM3:00
・緊急メンテナンス：随時（事前通知あり）
```

### Step 3: 運用項目の洗い出し
システムの安定運用に必要な作業を全て洗い出します。

**運用項目の例：**
- データバックアップ
- システム監視
- ログ監視
- 性能監視
- セキュリティ監視
- 証明書更新
- ユーザー管理

### Step 4: 自動化の検討
効率的な運用のため、自動化できる作業を特定します。

**自動化の対象：**
- **バックアップ処理**：クラウドサービスの自動バックアップ機能
- **監視・アラート**：監視ツールによる自動通知
- **ログローテーション**：ログファイルの自動削除
- **スケールアウト**：負荷に応じた自動スケーリング

### Step 5: 障害対応手順の策定
想定される障害パターンごとに対応手順を作成します。

**障害パターン別対応例：**
```
■ Webサーバ障害
【検知方法】：監視ツールによる死活監視
【初期対応】：ロードバランサーから切り離し
【復旧手順】：
1. サーバ再起動
2. アプリケーション起動確認
3. 動作確認後、ロードバランサーに復旧

■ データベース障害
【検知方法】：DB接続エラー監視
【初期対応】：影響範囲の確認
【復旧手順】：
1. バックアップからのリストア
2. データ整合性確認
3. アプリケーション再起動
```

## 作成時のポイント

### 1. **具体性を重視する**
曖昧な表現は避け、「誰が」「いつ」「何を」「どのように」を明確にします。

**悪い例**：「定期的にシステムをチェックする」
**良い例**：「毎日AM9:00に運用担当者がシステム監視画面で異常ログの有無を確認する」

### 2. **実現可能性を考慮する**
理想的な運用設計も、実際に実行できなければ意味がありません。

**考慮事項：**
- 運用チームのスキルレベル
- 利用可能なツール・予算
- 作業時間の制約
- 人的リソースの制約

### 3. **継続的な改善を前提とする**
運用設計書は一度作成して終わりではなく、運用の中で見つかった課題を反映して継続的に改善します。

### 4. **関係者との合意形成**
運用設計書は関係者全員が理解し、合意することが重要です。

**関係者の例：**
- 開発チーム
- 運用チーム
- 事業部門
- 経営層

## 実際の運用設計書サンプル

### ECサイトの運用設計書（抜粋）

```
■ システム概要
・システム名：ECサイト
・サービス提供時間：24時間365日
・想定利用者数：1日10,000ユーザー

■ 運用時間
【オンラインサービス】
・顧客向けサービス：24時間365日
・管理者向けサービス：平日9:00～18:00

【バッチ処理】
・売上集計処理：毎日AM2:00実行
・在庫更新処理：毎日AM3:00実行

■ 定期運用
【日次運用】
・バックアップ確認：毎日AM9:00（自動実行結果の確認）
・システム監視：24時間（自動監視＋異常時のアラート）
・ログ確認：毎日AM10:00（エラーログの確認）

【週次運用】
・性能レポート確認：毎週月曜日AM10:00
・セキュリティログ確認：毎週金曜日AM10:00

【月次運用】
・容量使用状況確認：毎月1日
・SSL証明書有効期限確認：毎月1日

■ 障害時運用
【Webサーバ障害】
1. 監視ツールがサーバ異常を検知
2. 運用担当者へメール・SMS通知
3. 30分以内に初期対応開始
4. 必要に応じて予備サーバへ切り替え

【データベース障害】
1. DB接続エラーを検知
2. 即座に開発チームへ連絡
3. 1時間以内にバックアップからの復旧開始
4. データ整合性確認後、サービス復旧
```

## よくある間違いと対策

### 1. **運用時間の定義が曖昧**
**問題**：「基本的に24時間」「原則として平日のみ」
**対策**：具体的な時間を明記し、例外条件も明確にする

### 2. **作業手順が不明確**
**問題**：「適切に対応する」「必要に応じて実施」
**対策**：Step by Stepで具体的な手順を記述

### 3. **責任者・実施者が不明**
**問題**：「誰かが実施する」「チームで対応」
**対策**：役割分担を明確にし、責任者を特定

### 4. **自動化の検討不足**
**問題**：全て手動で実施する前提
**対策**：自動化可能な作業を特定し、段階的に自動化

## 作成後の運用

### 1. **定期的な見直し**
運用設計書は定期的に見直し、実際の運用状況に合わせて更新します。

### 2. **関係者への周知**
新しい運用手順や変更点は、関係者全員に周知徹底します。

### 3. **運用実績の記録**
運用作業の実績を記録し、改善点を把握します。

### 4. **トレーニングの実施**
新しい運用手順については、関係者向けのトレーニングを実施します。

## まとめ

運用設計書は、システムの安定稼働を支える重要な文書です。作成時は以下のポイントを意識しましょう：

**重要なポイント：**
- システムの特性に応じた運用時間の設計
- 具体的で実行可能な運用手順の記述
- 自動化による効率化の検討
- 障害時の迅速な対応手順の策定
- 継続的な改善のための仕組み作り

新人エンジニアの皆さんも、この記事を参考に質の高い運用設計書を作成してください。最初は完璧でなくても、運用の中で改善していけば良いのです。わからないことがあれば、先輩エンジニアや運用チームに相談し、チーム全体でより良い運用を目指しましょう。

運用設計書の作成は、システムの安定稼働だけでなく、エンジニアとしてのスキルアップにも繋がる重要な経験です。ぜひ積極的に取り組んでください。
