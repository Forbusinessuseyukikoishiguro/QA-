# 新人エンジニア必読！要件定義書・機能仕様書の読み方完全ガイド

## はじめに

「要件定義書が分厚くて、どこから読めばいいかわからない...」
「機能仕様書の内容が理解できない...」
「業務要件って何？機能要件との違いは？」

新人エンジニアが必ずぶつかる壁が**要件定義書・機能仕様書**の読み方です。

この記事では、実際の保険システムの要件定義書を例に、文書の構造と読み方のコツを分かりやすく解説します。

---

## 要件定義書の全体構造

まず、要件定義書がどのような構造になっているかを理解しましょう。

```
要件定義書
├── 1. 概要・目的
├── 2. 業務要件（何をするか）
├── 3. 機能要件（どう作るか）
├── 4. 非機能要件（性能・品質）
└── 5. 制約事項・前提条件
```

**今回解説する部分：**
- **2. 業務要件**：ビジネス的に何を実現したいか
- **3. 機能要件**：システム的にどう実装するか

---

## 2. 業務要件の読み方

### 業務要件とは？

**定義：** ビジネス上で実現したい内容を記載した要件

**特徴：**
- システムより前にビジネスロジックを説明
- 「なぜそのシステムが必要か」が分かる
- 非エンジニアでも理解できる内容

### 実例で学ぶ：保険商品システムの業務要件

#### 例1：商品ラインナップ
```markdown
## 2.1 商品ラインナップ

### (1) 売り止め商品
- メディカル商品A（女性専用）
  → 販売終了する商品

### (2) 新規販売商品  
- メディカル商品B
  → 新しく販売開始する商品

### (3) 特約付加内容の変更
- メディカル商品C
  → 既存商品に新しいオプションを追加
```

**新人エンジニアの読み方：**
- 📖 **ビジネス背景**：商品戦略の変更がある
- 🎯 **影響範囲**：3つの商品で対応が必要
- ⚠️ **注意点**：売り止めは既存ユーザーへの配慮が必要

#### 例2：過渡期対応
```markdown
## 2.4 過渡期

### 2.4.1 見積もり結果URLからの再開について
売り止め商品は見積もり結果URLからの再開を不可とする

### 2.4.2 申込中断再開について  
- 売り止め商品：手続き再開不可
- 既存商品：条件付きで再開可能
```

**新人エンジニアの読み方：**
- 📖 **ビジネス背景**：商品変更の移行期間がある
- 🎯 **影響範囲**：既存の進行中申込への対応が必要
- ⚠️ **注意点**：ユーザビリティとビジネス要件のバランス

### 業務要件を読むコツ

#### 1. 背景を理解する
```
なぜこの変更が必要？
→ 商品戦略の変更
→ 法規制への対応
→ 競合対策
```

#### 2. 影響範囲を把握する
```
どの商品・機能に影響？
→ 新規：1商品
→ 変更：1商品  
→ 廃止：1商品
```

#### 3. 制約条件を確認する
```
できないこと・制限は？
→ 売り止め商品の新規申込不可
→ 特定条件での再開不可
→ 性別による表示制御
```

---

## 3. 機能要件の読み方

### 機能要件とは？

**定義：** 業務要件を実現するための具体的なシステム機能

**特徴：**
- 技術的な実装方法を記載
- エンジニアが直接作業する内容
- 画面・API・データベース等の具体的な設計

### 実例で学ぶ：シミュレーション機能の機能要件

#### 例1：シミュレーション商品設計
```markdown
## 3.1.1 シミュレーション商品設計

### (1) メディカル商品B
- 主契約・特約を選択可能とする
- 正しい特約表示順で表示する【QA No.5】
- 保険料払込期間で終身以外選択時に留意事項を表示【QA No.16】

### (2) メディカル商品C  
- 女性専用特約を選択可能とする
- 男性申込時は非表示とする
- 正しい特約表示順で表示する【QA No.5】
```

**新人エンジニアの読み方：**
- 🔧 **実装内容**：商品選択のUI変更
- 🎨 **画面設計**：表示順序と表示制御
- 🔗 **関連資料**：QA番号で詳細確認可能

#### 例2：保険料計算
```markdown
## 3.1.2 保険料計算

メディカル商品B・Cの保険料を算出する
※新設の主契約・特約はないため、既存の計算処理にて実施
```

**新人エンジニアの読み方：**
- 🔧 **実装内容**：保険料計算ロジックの適用
- 💡 **実装方針**：既存処理の流用が可能
- ⏰ **工数影響**：新規開発不要で工数削減

#### 例3：最低保険料チェック
```markdown
## 3.1.7 最低保険料チェック

商品Bの申込時に最低保険料以下の場合、エラーメッセージを表示
最低保険料：月払2,000円、年払24,000円

<エラー表示>
保険料が2,000円未満の場合、お申込みできません。
お申込みプランの再設定をお願いいたします。
商品Cは保険料が1,000円以上で申込み可能です。
```

**新人エンジニアの読み方：**
- 🔧 **実装内容**：バリデーション処理の追加
- 🎨 **UI設計**：具体的なエラーメッセージ
- 💼 **ビジネスロジック**：商品間の誘導も含む

### 機能要件を読むコツ

#### 1. 実装レベルで理解する
```markdown
## チェック項目
- [ ] どの画面・機能を変更するか？
- [ ] 新規開発か既存改修か？
- [ ] データベース変更は必要か？
- [ ] 外部システム連携は必要か？
```

#### 2. QA・関連資料を確認する
```markdown
【QA No.5】→ 詳細仕様の確認が必要
【QA No.16】→ 追加の要件がある可能性
「別紙参照」→ 関連する設計書をチェック
```

#### 3. 工数・リスクを想像する
```markdown
## 実装コスト予想
✅ 簡単：既存処理の流用
⚠️ 普通：新規画面・バリデーション追加  
🔥 複雑：新規計算ロジック・外部連携
```

---

## 実践的な読み方のテクニック

### 1. 文書の読む順番

```markdown
## おすすめの読み順

1. **全体の目次確認**（5分）
   → 何について書かれているかを把握

2. **業務要件をざっと読む**（15分）  
   → ビジネス背景と全体像を理解

3. **自分の担当機能を詳細に読む**（30分）
   → 実装に必要な情報を収集

4. **関連機能・制約事項を確認**（15分）
   → 影響範囲と注意点を把握

5. **不明点・QAをリストアップ**（10分）
   → 確認事項を整理
```

### 2. 読みながらメモするポイント

```markdown
## メモテンプレート

### 概要
- 何のシステム？：
- 主な変更内容：
- 対象ユーザー：

### 自分の担当範囲
- 変更対象：
- 新規開発：
- 既存改修：

### 確認事項
- 不明な技術用語：
- 関連する他機能：
- 必要な関連資料：

### 懸念点・リスク
- 技術的難易度：
- 工数が大きそうな箇所：
- 外部依存関係：
```

### 3. 質問の準備

```markdown
## 良い質問の例

❌ 悪い質問：
「この機能よくわからないです」

✅ 良い質問：
「3.1.1の(1)で『正しい特約表示順』とありますが、
 現在の表示順から何がどう変わるのでしょうか？
 別紙○○に記載されている順序のことでしょうか？」

## 質問のポイント
- 具体的な箇所を特定
- 自分なりの解釈を示す  
- 関連資料との整合性を確認
```

---

## 新人エンジニアがハマりがちな罠

### 罠1：技術用語で止まってしまう
❌ **やりがち：**
「API連携って何？」で思考停止

✅ **正しい対応：**
「API連携 = 他システムとのデータやり取り」
→ 具体的に何のデータを、どのタイミングで？

### 罠2：仕様書を完璧に理解しようとする
❌ **やりがち：**
全部理解するまで実装に入らない

✅ **正しい対応：**
- 自分の担当部分を優先的に理解
- 不明点は実装しながら確認
- 定期的に全体像を見直し

### 罠3：ビジネス要件を軽視する
❌ **やりがち：**
「技術仕様だけ分かれば十分」

✅ **正しい対応：**
- なぜその機能が必要かを理解
- ユーザーの使用場面を想像
- ビジネス価値を意識した実装

---

## まとめ

要件定義書・機能仕様書の読み方をまとめます：

### 業務要件の読み方
| ポイント | 内容 | 確認事項 |
|----------|------|----------|
| **背景理解** | なぜ必要？ | ビジネス戦略・法規制等 |
| **影響範囲** | 何が変わる？ | 対象商品・機能・ユーザー |
| **制約条件** | 何ができない？ | 技術的・ビジネス的制限 |

### 機能要件の読み方
| ポイント | 内容 | 確認事項 |
|----------|------|----------|
| **実装内容** | 何を作る？ | 画面・API・DB・ロジック |
| **実装方針** | どう作る？ | 新規開発・既存改修・流用 |
| **品質要件** | どう確認？ | テスト方法・エラー処理 |

### 読み方のコツ
1. **全体像 → 詳細** の順で読む
2. **自分の担当範囲を優先**して理解
3. **関連資料・QA**を必ず確認
4. **不明点は早めに質問**する
5. **ビジネス価値**を意識する

**次のアクション：**
- 実際の要件定義書で練習してみる
- 先輩エンジニアと一緒に読んでみる  
- 自分なりの読み方メモを作ってみる

良い要件理解が、良いシステム開発の出発点です。最初は大変ですが、慣れれば開発効率が大幅に向上します！

---

*要件定義書は「設計図」です。建築でも設計図を理解せずに家は建てられません。エンジニアにとっても同じです。この記事が皆さんの理解の助けになれば幸いです。*
