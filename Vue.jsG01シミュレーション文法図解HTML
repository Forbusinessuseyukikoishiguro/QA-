<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Vue.js文法構造図解</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
        }
        
        h1 {
            text-align: center;
            color: #2c3e50;
            margin-bottom: 30px;
            font-size: 2.5em;
        }
        
        h2 {
            color: #34495e;
            border-bottom: 3px solid #3498db;
            padding-bottom: 10px;
            margin-top: 40px;
        }
        
        .diagram-container {
            margin: 20px 0;
            padding: 20px;
            border: 2px solid #ecf0f1;
            border-radius: 10px;
            background: #f8f9fa;
        }
        
        .file-structure {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 20px;
        }
        
        .section {
            background: white;
            border: 2px solid #3498db;
            border-radius: 10px;
            padding: 15px;
            width: 90%;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        .section-title {
            background: #3498db;
            color: white;
            margin: -15px -15px 15px -15px;
            padding: 10px 15px;
            border-radius: 8px 8px 0 0;
            font-weight: bold;
            font-size: 1.2em;
        }
        
        .syntax-box {
            background: #2c3e50;
            color: #ecf0f1;
            padding: 15px;
            border-radius: 8px;
            font-family: 'Courier New', monospace;
            font-size: 14px;
            margin: 10px 0;
            overflow-x: auto;
        }
        
        .vue-directive {
            color: #e74c3c;
            font-weight: bold;
        }
        
        .js-keyword {
            color: #f39c12;
            font-weight: bold;
        }
        
        .js-string {
            color: #2ecc71;
        }
        
        .js-comment {
            color: #95a5a6;
            font-style: italic;
        }
        
        .flow-diagram {
            display: flex;
            justify-content: space-around;
            align-items: center;
            margin: 20px 0;
            flex-wrap: wrap;
        }
        
        .flow-box {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            padding: 15px;
            border-radius: 10px;
            text-align: center;
            min-width: 120px;
            margin: 10px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
        }
        
        .arrow {
            font-size: 2em;
            color: #34495e;
            margin: 0 10px;
        }
        
        .directive-table {
            width: 100%;
            border-collapse: collapse;
            margin: 15px 0;
        }
        
        .directive-table th,
        .directive-table td {
            border: 1px solid #bdc3c7;
            padding: 12px;
            text-align: left;
        }
        
        .directive-table th {
            background: #34495e;
            color: white;
        }
        
        .directive-table tr:nth-child(even) {
            background: #ecf0f1;
        }
        
        .component-tree {
            text-align: center;
            font-family: monospace;
            font-size: 14px;
            line-height: 2;
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            border: 2px solid #dee2e6;
        }
        
        .tree-node {
            display: inline-block;
            margin: 5px;
            padding: 8px 12px;
            background: #007bff;
            color: white;
            border-radius: 5px;
            text-decoration: none;
        }
        
        .lifecycle-diagram {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }
        
        .lifecycle-step {
            background: linear-gradient(45deg, #28a745, #20c997);
            color: white;
            padding: 15px;
            border-radius: 10px;
            text-align: center;
            position: relative;
        }
        
        .lifecycle-step::after {
            content: '↓';
            position: absolute;
            bottom: -30px;
            left: 50%;
            transform: translateX(-50%);
            font-size: 1.5em;
            color: #28a745;
        }
        
        .lifecycle-step:last-child::after {
            display: none;
        }
        
        .binding-examples {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin: 20px 0;
        }
        
        .binding-type {
            background: white;
            border: 2px solid #17a2b8;
            border-radius: 10px;
            padding: 15px;
        }
        
        .binding-type h4 {
            color: #17a2b8;
            margin-top: 0;
            border-bottom: 1px solid #17a2b8;
            padding-bottom: 5px;
        }
        
        .highlight {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            padding: 10px;
            border-radius: 5px;
            margin: 10px 0;
        }
        
        @media (max-width: 768px) {
            .binding-examples {
                grid-template-columns: 1fr;
            }
            
            .flow-diagram {
                flex-direction: column;
            }
            
            .arrow {
                transform: rotate(90deg);
                margin: 0;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>🔧 Vue.js文法構造図解</h1>
        
        <h2>📁 1. ファイル全体構造</h2>
        <div class="diagram-container">
            <div class="file-structure">
                <div class="section">
                    <div class="section-title">&lt;template&gt; - HTMLテンプレート部分</div>
                    <div class="syntax-box">
&lt;<span class="vue-directive">template</span>&gt;
  &lt;div id="top"&gt;
    &lt;GlobalHeader /&gt;
    &lt;main&gt;
      &lt;!-- Vue.jsディレクティブを使用 --&gt;
      &lt;section <span class="vue-directive">v-if</span>="uiProps.showError"&gt;
        &lt;p&gt;{{ simulationParams.message }}&lt;/p&gt;
      &lt;/section&gt;
    &lt;/main&gt;
  &lt;/div&gt;
&lt;/<span class="vue-directive">template</span>&gt;
                    </div>
                </div>
                
                <div class="section">
                    <div class="section-title">&lt;script&gt; - JavaScript ロジック部分</div>
                    <div class="syntax-box">
&lt;<span class="js-keyword">script</span>&gt;
<span class="js-keyword">export default</span> {
  <span class="js-comment">// コンポーネント定義</span>
  components: { ... },
  <span class="js-keyword">data</span>() {
    <span class="js-keyword">return</span> { ... }
  },
  computed: { ... },
  methods: { ... },
  mounted() { ... }
}
&lt;/<span class="js-keyword">script</span>&gt;
                    </div>
                </div>
                
                <div class="section">
                    <div class="section-title">&lt;style&gt; - CSS スタイル部分</div>
                    <div class="syntax-box">
&lt;<span class="js-keyword">style</span> scoped&gt;
<span class="js-comment">/* コンポーネント専用スタイル */</span>
.top-product-list {
  font-size: 0;
  margin-top: 0.7rem;
}
&lt;/<span class="js-keyword">style</span>&gt;
                    </div>
                </div>
            </div>
        </div>

        <h2>🎯 2. Vue.js ディレクティブ文法</h2>
        <div class="diagram-container">
            <table class="directive-table">
                <thead>
                    <tr>
                        <th>ディレクティブ</th>
                        <th>文法</th>
                        <th>実際の使用例</th>
                        <th>説明</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td><code>v-if</code></td>
                        <td><code>v-if="条件式"</code></td>
                        <td><code>v-if="uiProps.showError"</code></td>
                        <td>条件が真の時だけ要素を表示</td>
                    </tr>
                    <tr>
                        <td><code>v-show</code></td>
                        <td><code>v-show="条件式"</code></td>
                        <td><code>v-show="isSumameDisplayed"</code></td>
                        <td>要素は残したまま表示/非表示</td>
                    </tr>
                    <tr>
                        <td><code>v-model</code></td>
                        <td><code>v-model="変数"</code></td>
                        <td><code>v-model="simulationParams.mainTypeCd"</code></td>
                        <td>双方向データバインディング</td>
                    </tr>
                    <tr>
                        <td><code>v-bind</code></td>
                        <td><code>v-bind:属性="値"</code></td>
                        <td><code>v-bind:class="{ 'active': isActive }"</code></td>
                        <td>属性を動的にバインド</td>
                    </tr>
                    <tr>
                        <td><code>v-on</code></td>
                        <td><code>v-on:イベント="メソッド"</code></td>
                        <td><code>v-on:click="clickNext()"</code></td>
                        <td>イベントリスナーを設定</td>
                    </tr>
                </tbody>
            </table>
        </div>

        <h2>📊 3. データバインディング種類</h2>
        <div class="binding-examples">
            <div class="binding-type">
                <h4>📤 一方向バインディング</h4>
                <div class="syntax-box">
<span class="js-comment">&lt;!-- 文字列展開 --&gt;</span>
{{ simulationParams.fullAge }}

<span class="js-comment">&lt;!-- 属性バインディング --&gt;</span>
&lt;div <span class="vue-directive">:class</span>="dynamicClass"&gt;

<span class="js-comment">&lt;!-- HTMLバインディング --&gt;</span>
&lt;div <span class="vue-directive">v-html</span>="htmlContent"&gt;
                </div>
            </div>
            
            <div class="binding-type">
                <h4>🔄 双方向バインディング</h4>
                <div class="syntax-box">
<span class="js-comment">&lt;!-- 入力フィールド --&gt;</span>
&lt;input <span class="vue-directive">v-model</span>="inputValue"&gt;

<span class="js-comment">&lt;!-- ラジオボタン --&gt;</span>
&lt;input type="radio" 
       <span class="vue-directive">v-model</span>="selectedValue"
       value="option1"&gt;

<span class="js-comment">&lt;!-- セレクトボックス --&gt;</span>
&lt;select <span class="vue-directive">v-model</span>="selected"&gt;
                </div>
            </div>
        </div>

        <h2>🏗️ 4. コンポーネント構造図</h2>
        <div class="diagram-container">
            <div class="component-tree">
                <div>🏠 SimulationPage (メインコンポーネント)</div>
                <div style="margin-left: 40px;">
                    ├── 📋 GlobalHeader<br>
                    ├── 📝 BirthDateGenderInput<br>
                    ├── 🏥 ProductDetailSumame<br>
                    ├── 🐰 ProductDetailSumameRabbit<br>
                    ├── 7️⃣ ProductDetailSeven<br>
                    ├── 3️⃣ ProductDetailThree<br>
                    ├── 🔍 ProductDetailWide<br>
                    ├── 🎯 ProductDetailTokuzero<br>
                    ├── 🏥 ProductDetailGansapo<br>
                    ├── 💾 SimulationSave<br>
                    ├── ⬆️ PageTopButton<br>
                    ├── 📄 GlobalFooter<br>
                    └── 🪟 Modal
                </div>
            </div>
        </div>

        <h2>⚙️ 5. JavaScript部分の構造</h2>
        <div class="diagram-container">
            <div class="syntax-box">
<span class="js-keyword">export default</span> {
  <span class="js-comment">// 子コンポーネントの登録</span>
  <span class="js-keyword">components</span>: {
    GlobalHeader,
    BirthDateGenderInput,
    ProductDetailSumame
  },
  
  <span class="js-comment">// リアクティブデータ</span>
  <span class="js-keyword">data</span>() {
    <span class="js-keyword">return</span> {
      constants: { <span class="js-comment">/* 定数 */</span> },
      simulationParams: { <span class="js-comment">/* パラメータ */</span> },
      uiProps: { <span class="js-comment">/* UI状態 */</span> }
    }
  },
  
  <span class="js-comment">// 算出プロパティ（自動で再計算）</span>
  <span class="js-keyword">computed</span>: {
    totalValue() { <span class="js-comment">/* 計算処理 */</span> },
    isUnderMinFee() { <span class="js-comment">/* バリデーション */</span> }
  },
  
  <span class="js-comment">// メソッド（イベントハンドラ等）</span>
  <span class="js-keyword">methods</span>: {
    clickNext() { <span class="js-comment">/* 次へボタン処理 */</span> },
    initData() { <span class="js-comment">/* 初期化処理 */</span> }
  },
  
  <span class="js-comment">// ライフサイクルフック</span>
  <span class="js-keyword">mounted</span>() {
    <span class="js-comment">// コンポーネント初期化後の処理</span>
  }
}
            </div>
        </div>

        <h2>🔄 6. データフロー図</h2>
        <div class="diagram-container">
            <div class="flow-diagram">
                <div class="flow-box">👤<br>ユーザー入力</div>
                <div class="arrow">→</div>
                <div class="flow-box">📊<br>data()</div>
                <div class="arrow">→</div>
                <div class="flow-box">🧮<br>computed</div>
                <div class="arrow">→</div>
                <div class="flow-box">🖥️<br>template</div>
            </div>
            
            <div class="highlight">
                <strong>データフローの説明：</strong><br>
                1. ユーザーが入力 → data()のプロパティが更新<br>
                2. data()が変更 → computed プロパティが自動再計算<br>
                3. computed が変更 → template が自動で再レンダリング
            </div>
        </div>

        <h2>📝 7. 重要な文法パターン</h2>
        <div class="diagram-container">
            
            <h3>🎨 動的クラスバインディング</h3>
            <div class="syntax-box">
<span class="js-comment">&lt;!-- オブジェクト記法 --&gt;</span>
&lt;li <span class="vue-directive">v-bind:class</span>=<span class="js-string">"{
  'border-enable': simulationParams.mainTypeCd == constants.MAIN_TYPE_CD_MEDICAL_2022,
  'active': isActive,
  'disabled': !isEnabled
}"</span>&gt;

<span class="js-comment">&lt;!-- 配列記法 --&gt;</span>
&lt;div <span class="vue-directive">:class</span>=<span class="js-string">"[baseClass, errorClass, { 'warning': hasWarning }]"</span>&gt;
            </div>

            <h3>🔁 条件付きレンダリング</h3>
            <div class="syntax-box">
<span class="js-comment">&lt;!-- v-if: DOM要素を削除/追加 --&gt;</span>
&lt;section <span class="vue-directive">v-if</span>=<span class="js-string">"uiProps.showError"</span>&gt;
  &lt;p&gt;{{ simulationParams.message }}&lt;/p&gt;
&lt;/section&gt;

<span class="js-comment">&lt;!-- v-show: CSS display で表示/非表示 --&gt;</span>
&lt;div <span class="vue-directive">v-show</span>=<span class="js-string">"isSumameDisplayed"</span>&gt;
  商品詳細
&lt;/div&gt;

<span class="js-comment">&lt;!-- v-else-if, v-else --&gt;</span>
&lt;div <span class="vue-directive">v-if</span>=<span class="js-string">"type === 'A'"</span>&gt;タイプA&lt;/div&gt;
&lt;div <span class="vue-directive">v-else-if</span>=<span class="js-string">"type === 'B'"</span>&gt;タイプB&lt;/div&gt;
&lt;div <span class="vue-directive">v-else</span>&gt;その他&lt;/div&gt;
            </div>

            <h3>🎪 イベントハンドリング</h3>
            <div class="syntax-box">
<span class="js-comment">&lt;!-- 省略記法 --&gt;</span>
&lt;button <span class="vue-directive">@click</span>=<span class="js-string">"clickNext()"</span>&gt;次へ&lt;/button&gt;

<span class="js-comment">&lt;!-- 完全記法 --&gt;</span>
&lt;button <span class="vue-directive">v-on:click</span>=<span class="js-string">"clickNext()"</span>&gt;次へ&lt;/button&gt;

<span class="js-comment">&lt;!-- パラメータ付き --&gt;</span>
&lt;button <span class="vue-directive">@click</span>=<span class="js-string">"selectProduct('sumame')"</span>&gt;選択&lt;/button&gt;

<span class="js-comment">&lt;!-- イベント修飾子 --&gt;</span>
&lt;form <span class="vue-directive">@submit.prevent</span>=<span class="js-string">"onSubmit"</span>&gt;
&lt;button <span class="vue-directive">@click.stop</span>=<span class="js-string">"doThis"</span>&gt;
            </div>
        </div>

        <h2>🎪 8. ライフサイクル図</h2>
        <div class="diagram-container">
            <div class="lifecycle-diagram">
                <div class="lifecycle-step">
                    <strong>beforeCreate</strong><br>
                    <small>インスタンス初期化前</small>
                </div>
                <div class="lifecycle-step">
                    <strong>created</strong><br>
                    <small>インスタンス作成完了</small>
                </div>
                <div class="lifecycle-step">
                    <strong>beforeMount</strong><br>
                    <small>DOM挿入前</small>
                </div>
                <div class="lifecycle-step">
                    <strong>mounted</strong><br>
                    <small>DOM挿入完了</small><br>
                    <em>← このファイルで使用</em>
                </div>
                <div class="lifecycle-step">
                    <strong>beforeUpdate</strong><br>
                    <small>データ更新前</small>
                </div>
                <div class="lifecycle-step">
                    <strong>updated</strong><br>
                    <small>DOM更新完了</small>
                </div>
                <div class="lifecycle-step">
                    <strong>beforeDestroy</strong><br>
                    <small>破棄前</small>
                </div>
                <div class="lifecycle-step">
                    <strong>destroyed</strong><br>
                    <small>破棄完了</small><br>
                    <em>← このファイルで使用</em>
                </div>
            </div>
        </div>

        <h2>🧮 9. Computed vs Methods の違い</h2>
        <div class="binding-examples">
            <div class="binding-type">
                <h4>🧮 Computed (算出プロパティ)</h4>
                <div class="syntax-box">
computed: {
  <span class="js-comment">// 依存データが変更された時のみ再計算</span>
  totalValue() {
    <span class="js-keyword">return</span> <span class="js-keyword">this</span>.price * <span class="js-keyword">this</span>.quantity
  },
  
  <span class="js-comment">// キャッシュされる</span>
  expensiveCalculation() {
    <span class="js-comment">// 重い処理でも効率的</span>
    <span class="js-keyword">return</span> someHeavyComputation()
  }
}
                </div>
                <div class="highlight">
                    <strong>特徴：</strong> キャッシュ、自動更新、getter/setter可能
                </div>
            </div>
            
            <div class="binding-type">
                <h4>🔧 Methods (メソッド)</h4>
                <div class="syntax-box">
methods: {
  <span class="js-comment">// 呼ばれるたびに実行</span>
  calculateTotal() {
    <span class="js-keyword">return</span> <span class="js-keyword">this</span>.price * <span class="js-keyword">this</span>.quantity
  },
  
  <span class="js-comment">// イベントハンドラ</span>
  handleClick() {
    <span class="js-keyword">this</span>.doSomething()
  },
  
  <span class="js-comment">// 副作用のある処理</span>
  saveData() {
    api.post(<span class="js-string">'/save'</span>, <span class="js-keyword">this</span>.data)
  }
}
                </div>
                <div class="highlight">
                    <strong>特徴：</strong> 毎回実行、イベント処理、副作用OK
                </div>
            </div>
        </div>

        <div class="highlight" style="margin-top: 30px; background: #d4edda; border-color: #c3e6cb;">
            <h3>🎯 学習のポイント</h3>
            <ul>
                <li><strong>Vue.js ディレクティブ</strong>：v-if, v-show, v-model, v-bind, v-on の使い分け</li>
                <li><strong>データバインディング</strong>：{{ }} (補間), : (属性), v-model (双方向)</li>
                <li><strong>コンポーネント通信</strong>：props (親→子), emit (子→親)</li>
                <li><strong>状態管理</strong>：data, computed, methods の役割分担</li>
                <li><strong>ライフサイクル</strong>：mounted, destroyed でのリソース管理</li>
            </ul>
        </div>
    </div>
</body>
</html>
